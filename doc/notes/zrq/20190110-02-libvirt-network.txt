#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2019, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Global network params.
#[user@trop03]

    netsize=32
    netbase=210

# -----------------------------------------------------
# Public IP addresses.
#[user@trop03]

    declare -A publicips=(
        [trop01]=129.215.175.96
        [trop02]=129.215.175.97
        [trop03]=129.215.175.98
        [trop04]=129.215.175.99
        [trop05]=192.41.108.100
        [trop06]=192.41.108.101
        [trop07]=192.41.108.102
        [trop08]=192.41.108.103
        )

# -----------------------------------------------------
# Virtual machine names.
# https://www.namegenerator.biz/fantasy-name-generator.php
#[user@trop03]

    declare -a trop01names=(
        Delild
        Abecien
        Saewan
        Cadelicia

        Froeseth
        Astoalith
        Erennon
        Gworewia

        Alaujar
        Cralle
        Thendam
        Lothaylith

        Etauk
        Learwen
        Rhaegord
        Siligord

        Elacien
        Erilikith
        Acude
        Chaedon

        Ocoawen
        Ediravia
        Edarev
        Prelilla

        Thorenad
        Fromal
        Laedith
        Talewyn

        Laralitlan
        Rhardoweth
        )

    declare -a trop02names=(
        Araybwyn
        Lothigometh
        Ulov
        Dwiema

        Ibalehar
        Eterathiel
        Siamond
        Acilamwen

        Freiwyr
        Proclya
        Caderarin
        Cing

        Mireanyth
        Qirendra
        Yarenad
        Gwerawen

        Mirerrabard
        Ocillan
        Brilad
        Agrerilith

        Lothamond
        Gworessa
        Eliran
        Abelama

        Lomalath
        Agraesa
        Onardonydd
        Wicardometh

        Glardog
        Frardowen
        )

    declare -a trop03names=(
        Umiawyth
        Etalema
        Greand
        Nydiralle

        Kedaekoth
        Onelith
        Elaleld
        Afoaviel

        Rusaldez
        Stedigo
        Angece
        Edwalafia

        Onoza
        Fosauri
        Marpus
        Byflame

        Grerat
        Jeralenia
        Dwardoa
        Larohac

        Kaaeclya
        Elirannor
        Jeroaveth
        Rorekon

        Astalenna
        Afib
        Lotholia
        Astilamos

        Jereania
        Drilibaen
        )

    declare -a trop04names=(
        Wumar
        Larilaweth
        Ror
        Asterade

        Ibedrinnon
        Arigorith
        Glydan
        Clarith

        Cadoired
        Adweasien
        Etemar
        Sevaymwen

        Rydan
        Kaaclya
        Crohab
        Iberani

        Nerrawan
        Gwauswen
        Cirel
        Gendaswen

        Ocede
        Crilird
        Astendawen
        Nendalith

        Saelia
        Adwaeric
        Moemond
        Iberidia

        Palem
        Daulian
        )

    declare -a trop05names=(
        Nydaulin
        Caysien
        Mirendald
        Adrorellan

        Agriesean
        Abielia
        Larohamos
        Adruma

        Ethauth
        Agruclya
        Frirevudd
        Teinia

        Alerrahar
        Meawen
        Uligond
        Kairemma

        Wiceth
        Walewen
        Jelamos
        Wicaen

        Frohard
        Vussa
        Zaer
        Sevirang

        Brealath
        Droinia
        Kirar
        Ciawia

        Ethos
        Qerralle
        )

    declare -a trop06names=(

        Roagan
        Zydia
        Rilawin
        Afarerith

        Ybaejar
        Tiladia
        Kedojan
        Zenia

        Ocigowyn
        Ybaethien
        Cadauwyn
        Adriralith

        Aaenydd
        Venna
        Cendamas
        Onerisien

        Ulayjan
        Grirallan
        Galiliwyth
        Adameth

        Piwin
        Aliracien
        Onirakath
        Ibalelia

        Ulaekoth
        Lotharith
        Adwaojan
        Asirania

        Horic
        Ocun
        )

    declare -a trop07names=(
        Berav
        Wicaron
        Astillan
        Kederilin

        Olilissa
        Fredrilith
        Nydoessi
        Cauron

        Aberalla
        Legohawyn
        Iboivia
        Astomach

        Ariwia
        Galilac
        Hein
        Pelikor

        Asosien
        Frardoseth
        Ethaodda
        Sevagan

        Cardolla
        Gua
        Adroirwen
        Wirech

        Asaolle
        Ethaem
        Kedieni
        Gwalip

        Saliveth
        Lardobard
        )

    declare -a trop08names=(
        Mirigoniel
        Unerawyn
        Agrobeth
        Crorelith

        Jeroacia
        Ibaleron
        Alalemma
        Mardotlan

        Boedith
        Rhaseth
        Caothien
        Adwoigord

        Etalecia
        Giramond
        Roiniel
        Cadaehan

        Peama
        Umaom
        Thoalia
        Adredritram

        Etethiel
        Elarev
        Direwen
        Lotherawin

        Rhareviel
        Rhohawyn
        Yaewen
        Unerivudd

        Gworelian
        Astoreseth
        )

# -----------------------------------------------------
# Function to print a 52:54 MAC address.
#[user@trop03]

    printmac()
        {
        local hextet=${1:?}
        local hibyte=$((
            ${hextet} / 256
            ))
        local lobyte=$((
            ${hextet} % 256
            ))
        local array=(
            '52'
            '54'
            '0'
            '0'
            '0'
            '0'
            )
        array[4]=$(
            printf "%02X" ${hibyte}
            )
        array[5]=$(
            printf "%02X" ${lobyte}
            )
        local string=${array[*]}
        echo ${string// /:}
        }

# -----------------------------------------------------
# Function to print a 192.168 IPv4 address.
#[user@trop03]

    printinet()
        {
        local hextet=${1:?}
        local hibyte
        local lobyte
        local array
        local string
        local hibyte=$((
            ${hextet} / 256
            ))
        local lobyte=$((
            ${hextet} % 256
            ))
        local array=(
            '192'
            '168'
            '0'
            '0'
            )
        array[2]=$(
            printf "%d" ${hibyte}
            )
        array[3]=$(
            printf "%d" ${lobyte}
            )
        local string=${array[*]}
        echo ${string// /.}
        }

# -----------------------------------------------------
# Function to generate the extra routes.
#[user@trop03]

    printroute()
        {
        local node=${1:?}
        local host=$(printf "trop%02x" ${node})
        local base=$((
            (${netbase:?} * 256) + (((${node} * 2) - 2) * ${netsize:?})
            ))
        local route=$(printinet ${base})
        local router=${publicips[${host}]}
        #echo "Adding route [${host}][${route} via ${router}]"
        echo "sudo ip route add ${route}/27 via ${router} dev br0"
        }

    printroutes()
        {
        local tmpfile=$(mktemp)
        for node in {1..4}
        do
            name=$(printf "trop%02x" ${node})
            if [ "${name}" != "$(hostname -s)" ]
            then
                printroute \
                    ${node} \
                >> "${tmpfile}"
            fi
        done
        echo "${tmpfile}"
        }

# -----------------------------------------------------
# Generate the extra routes to the other nodes.
#[user@trop03]

    cat $(printroutes)

    >   sudo ip route add 192.168.210.0/27 via 129.215.175.96 dev br0
    >   sudo ip route add 192.168.210.64/27 via 129.215.175.97 dev br0
    >   sudo ip route add 192.168.210.192/27 via 129.215.175.99 dev br0


# -----------------------------------------------------
# Functions to generate the libvirt networks.
#[user@trop03]

    printnetwork()
        {
        local node=${1:?}
        local mode=${2:?}
        local name=${3:?}
        local netn=${4:?}

        local host=$(printf "trop%02x" ${node})
        local base=$(((${netbase:?} * 256) + (${netn} * ${netsize:?})))

        local dhlo=$((base + 0))
        local dhhi=$((base + 29))

        local inet=$((base + 30))
        local cast=$((base + 31))

        local tmpfile=$(mktemp)

cat > "${tmpfile}" << EOF
<network ipv6='yes'>
    <name>${name}</name>
    <uuid/>
    <bridge name='virbr0' stp='off' delay='0'/>
    <forward mode='${mode}'>
EOF

        if [ "${mode}" == 'nat' ]
        then
cat >> "${tmpfile}" << EOF
        <nat>
            <port start='1024' end='65535'/>
        </nat>
EOF
        fi

cat >> "${tmpfile}" << EOF
    </forward>
    <mac address='$(printmac  ${inet})'/>
    <ip family='ipv4' address='$(printinet inet)' netmask='255.255.255.224'>
        <dhcp>
            <range start='$(printinet dhlo)' end='$(printinet dhhi)'/>
EOF

        local virt
        for virt in {0..29}
        do
            local temp=${host}names[${virt}]
            local name
            if [ ${mode} == 'nat' ]
            then
                name=${!temp}-nat
            else
                name=${!temp}
            fi
            #echo "$(printf "%16s" $name) [$(printf "%02X" ${virt})] [$(printmac  $((base + virt)))] [$(printinet $((base + virt)))]"
cat >> "${tmpfile}" << EOF
            <host mac='$(printmac $((base + virt)))' ip='$(printinet $((base + virt)))' name='${name}'/>
EOF
        done

cat >> "${tmpfile}" << EOF
        </dhcp>
    </ip>
</network>
EOF
        echo "${tmpfile}"
        }

    printrouted()
        {
        local host=$(hostname -s)
        local node=${host:4}
        printnetwork \
            ${node} \
            'route' \
            'routed' \
            $(((${node} * 2) - 2))
        }

    printnatted()
        {
        local host=$(hostname -s)
        local node=${host:4}
        printnetwork \
            ${node} \
            'nat' \
            'natted' \
            $(((${node} * 2) - 1))
        }

# -----------------------------------------------------
# Generate the routed network.
#[user@trop03]

    cat $(printrouted)

    >   <network ipv6='yes'>
    >       <name>routed</name>
    >       <uuid/>
    >       <bridge name='virbr0' stp='off' delay='0'/>
    >       <forward mode='route'>
    >       </forward>
    >       <mac address='52:54:0:0:D2:9E'/>
    >       <ip family='ipv4' address='192.168.210.158' netmask='255.255.255.224'>
    >           <dhcp>
    >               <range start='192.168.210.128' end='192.168.210.157'/>
    >               <host mac='52:54:0:0:D2:80' ip='192.168.210.128' name='Umiawyth'/>
    >               <host mac='52:54:0:0:D2:81' ip='192.168.210.129' name='Etalema'/>
    >               <host mac='52:54:0:0:D2:82' ip='192.168.210.130' name='Greand'/>
    >               ....
    >               ....
    >               <host mac='52:54:0:0:D2:9B' ip='192.168.210.155' name='Astilamos'/>
    >               <host mac='52:54:0:0:D2:9C' ip='192.168.210.156' name='Jereania'/>
    >               <host mac='52:54:0:0:D2:9D' ip='192.168.210.157' name='Drilibaen'/>
    >           </dhcp>
    >       </ip>
    >   </network>


# -----------------------------------------------------
# Generate the NAT network.
#[user@trop03]

    cat $(printnatted)

    >   <network ipv6='yes'>
    >       <name>natted</name>
    >       <uuid/>
    >       <bridge name='virbr0' stp='off' delay='0'/>
    >       <forward mode='nat'>
    >           <nat>
    >               <port start='1024' end='65535'/>
    >           </nat>
    >       </forward>
    >       <mac address='52:54:0:0:D2:BE'/>
    >       <ip family='ipv4' address='192.168.210.190' netmask='255.255.255.224'>
    >           <dhcp>
    >               <range start='192.168.210.160' end='192.168.210.189'/>
    >               <host mac='52:54:0:0:D2:A0' ip='192.168.210.160' name='Umiawyth-nat'/>
    >               <host mac='52:54:0:0:D2:A1' ip='192.168.210.161' name='Etalema-nat'/>
    >               <host mac='52:54:0:0:D2:A2' ip='192.168.210.162' name='Greand-nat'/>
    >               ....
    >               ....
    >               <host mac='52:54:0:0:D2:BB' ip='192.168.210.187' name='Astilamos-nat'/>
    >               <host mac='52:54:0:0:D2:BC' ip='192.168.210.188' name='Jereania-nat'/>
    >               <host mac='52:54:0:0:D2:BD' ip='192.168.210.189' name='Drilibaen-nat'/>
    >           </dhcp>
    >       </ip>
    >   </network>


# -----------------------------------------------------
# Function to generate the /etc/hosts data.
#[user@trop03]

    printhosts()
        {
        local tmpfile=$(mktemp)
        local node
        for node in {1..4}
        do
            local host=$(printf "trop%02x" ${node})
            local base=$((
                (${netbase:?} * 256) + ((${node} - 1) * ${netsize:?} * 2)
                ))
cat >> "${tmpfile}" << EOF

#
# ${host}
EOF
            local virt
            for virt in {0..29}
            do
                local temp=${host}names[${virt}]
                local name=${!temp}
cat >> "${tmpfile}" << EOF
$(printf "%-16s" $(printinet $((base + virt)))) ${name}
EOF
            done
        done
        echo "${tmpfile}"
        }

# -----------------------------------------------------
# Generate the /etc/hosts data.
#[user@trop03]

    cat $(printhosts)

    >   #
    >   # trop01
    >   192.168.210.0    Delild
    >   192.168.210.1    Abecien
    >   192.168.210.2    Saewan
    >   ...
    >   ...
    >   192.168.210.27   Talewyn
    >   192.168.210.28   Laralitlan
    >   192.168.210.29   Rhardoweth
    >
    >   #
    >   # trop02
    >   192.168.210.64   Araybwyn
    >   192.168.210.65   Lothigometh
    >   192.168.210.66   Ulov
    >   ...
    >   ...
    >   192.168.210.91   Wicardometh
    >   192.168.210.92   Glardog
    >   192.168.210.93   Frardowen
    >
    >   #
    >   # trop03
    >   192.168.210.128  Umiawyth
    >   192.168.210.129  Etalema
    >   192.168.210.130  Greand
    >   ...
    >   ...
    >   192.168.210.155  Astilamos
    >   192.168.210.156  Jereania
    >   192.168.210.157  Drilibaen
    >
    >   #
    >   # trop04
    >   192.168.210.192  Wumar
    >   192.168.210.193  Larilaweth
    >   192.168.210.194  Ror
    >   ...
    >   ...
    >   192.168.210.219  Iberidia
    >   192.168.210.220  Palem
    >   192.168.210.221  Daulian

# -----------------------------------------------------
# Function to enerate ssh config statements.
#[user@trop03]

    printconfig()
        {
        local tmpfile=$(mktemp)
        local node
        for node in {1..4}
        do
            local host=$(printf "trop%02x" ${node})
cat >> ${tmpfile} << EOF
#
# ${host} virtual machines
EOF
            local outer
            local inner
            for outer in {0..4}
            do
                declare -a names=()
                for inner in {0..5}
                do
                    local virt=$(((outer * 6) + inner))
                    local temp=${host}names[${virt}]
                    names+=(${!temp})
                done
cat >> ${tmpfile} << EOF
host ${names[*]}
    User Stevedore
    CheckHostIP no
    UserKnownHostsFile /dev/null
    StrictHostKeyChecking no

EOF
            done
        done
        echo "${tmpfile}"
        }

# -----------------------------------------------------
# Generate our ssh config fragment.
#[user@trop03]

    cat $(printconfig)

    >   #
    >   # trop01 virtual machines
    >   host Delild Abecien Saewan Cadelicia Froeseth Astoalith
    >       User Stevedore
    >       CheckHostIP no
    >       UserKnownHostsFile /dev/null
    >       StrictHostKeyChecking no
    >
    >   host Erennon Gworewia Alaujar Cralle Thendam Lothaylith
    >       User Stevedore
    >       CheckHostIP no
    >       UserKnownHostsFile /dev/null
    >       StrictHostKeyChecking no
    >   ....
    >   ....

# -----------------------------------------------------
# Update the routed interface in the XML template.
#[user@trop03]

    srcpath=/var/local/projects/ischnura/github/src
    datpath=${srcpath:?}/dat
    cfgfile=${srcpath:?}/config

    source "${cfgfile:?}"

    cp "${template:?}" "${template:?}.bak"

    xmlstarlet \
        edit \
            --inplace \
            --update "//interface[source/@network='default']/mac/@address" \
                --value '##:##:##:##:##:##' \
            --update "//interface[source/@network='default']/source/@network" \
                --value 'routed' \
        "${template:?}"

# -----------------------------------------------------
# Add the natted interface to the XML template.
#[user@trop03]

    tmpfile=$(mktemp)
cat > "${tmpfile}" << EOF
    <interface type='network'>
      <mac address='##:##:##:##:##:##'/>
      <source network='natted'/>
      <target dev="vnet1"/>
      <model type="virtio"/>
      <alias name="net1"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x07" function="0x0"/>
    </interface>
EOF

    xmlstarlet \
        edit \
            --inplace \
            --append "//interface" \
                --type 'elem' \
                --name 'new-interface' \
        "${template:?}"

    sed --in-place "
        /new-interface/ {
            r ${tmpfile}
            d
            }
        " "${template:?}"

# -----------------------------------------------------
# Check the template interfaces.
#[user@trop03]

    xmlstarlet \
        select \
            --root \
            --indent \
            --template \
            --copy-of "//interface" \
        "${template:?}"

    >   <xsl-select>
    >     <interface type="network">
    >         <mac address="##:##:##:##:##:##"/>
    >         <source network="routed"/>
    >         <target dev="vnet0"/>
    >         <model type="virtio"/>
    >         <alias name="net0"/>
    >         <address type="pci" domain="0x0000" bus="0x00" slot="0x03" function="0x0"/>
    >       </interface>
    >     <interface type="network">
    >         <mac address="##:##:##:##:##:##"/>
    >         <source network="natted"/>
    >         <target dev="vnet1"/>
    >         <model type="virtio"/>
    >         <alias name="net1"/>
    >         <address type="pci" domain="0x0000" bus="0x00" slot="0x07" function="0x0"/>
    >       </interface>
    >   </xsl-select>


# -----------------------------------------------------
# Add our functions to a script file.
#[user@trop03]

    vi "$(dirname $(which createvm))/tools"

        ....
        ....


# -----------------------------------------------------
# Modify the createvm function to use the new interface settings.
#[user@trop03]

    vi $(which createvm)

        ....
        ....


        listname=$(hostname -s)names[@]
        echo $listname
        namelist=("${!listname}")
        echo ${namelist[@]}
        echo ${#namelist[@]}

        (( index = 1 ))
        for name in ${namelist[@]}
        do
            echo "[$[index]] ${name}"
            (( index = index + 1))
        done

        ....
        ....


        host=$(hostname -s)
        node=${host:4}
        base=$((
            (${netbase:?} * 256) + (((${node} * 2) - 2) * ${netsize:?})
            ))
        routed=$((base + nodenum))
        base=$((
            (${netbase:?} * 256) + (((${node} * 2) - 1) * ${netsize:?})
            ))
        natted=$((base + nodenum))

        echo "INFO : node [${nodenum}]"
        echo "INFO : MAC  [$(printmac  ${routed})]"
        echo "INFO : IPv4 [$(printinet ${routed})]"
        echo "INFO : MAC  [$(printmac  ${natted})]"
        echo "INFO : IPv4 [$(printinet ${natted})]"

        ....
        ....



Ooops .. deleted Zookeeper node Marpus.
Hopefully the rest will survive ...

Still TODO
Apply the changes to the network config on trop01.
Apply the changes to the network config on trop02.

Initial tests using ssh on nodes 0-4 on trop03<-->trop04.

Disconnect the volumes from the Kafka nodes.
Delete all the SMACK nodes and create a new set.
Connect the volumes to the Kafka nodes.



