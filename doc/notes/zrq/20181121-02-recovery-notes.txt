#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

        # -----------------------------------------------------
        # Get the OpenStack status of our Kafka nodes.
        #[root@openstacker]

            for vmident in ${kfidents[@]}
            do

                openstack \
                    server show \
                     --format json \
                    "${vmident:?}" \
                    | jq '.'

            done

            {
            "OS-EXT-STS:task_state": null,
            "addresses": "vm-network-UoE-internal=192.168.1.5, 172.16.49.217",
            "image": "fedora-27-docker-base-20180129 (407a5d09-cd97-455f-9bdb-4fb7f54dd4ff)",
            "OS-EXT-STS:vm_state": "active",
            "OS-SRV-USG:launched_at": "2018-06-15T16:07:07.000000",
            "flavor": "m1.medium (3)",
            "id": "bb409e47-cf2c-4e64-aea6-e893e5d05100",
            "security_groups": "name='Raminiara-kafka'\nname='default'",
            "volumes_attached": "id='e1fe1551-89b7-436c-b6c8-55d56a99c8fa'\nid='7df96e55-d788-449d-ab1e-2048ee039e82'\nid='e2e87fce-5c8f-46e0-afdf-5bc11afdcaf7'",
            "user_id": "3d241b5fa2d0b3378901e08e86e10284dc9f9dae3732b99f71f809cf46ccb0d5",
            "OS-DCF:diskConfig": "MANUAL",
            "accessIPv4": "",
            "accessIPv6": "",
            "progress": 0,
            "OS-EXT-STS:power_state": "Running",
            "project_id": "fcef6dd450f64a1ab4ffa5a7234c4161",
            "config_drive": "",
            "status": "ACTIVE",
            "updated": "2018-10-29T17:09:39Z",
            "hostId": "5f66288f9639d626d0a48fcd6733dfe0eea80fb1e51903aa04592288",
            "OS-SRV-USG:terminated_at": null,
            "key_name": "dmr",
            "properties": "",
            "OS-EXT-AZ:availability_zone": "nova",
            "name": "Raminiara-kafka-4",
            "created": "2018-06-15T16:06:54Z"
            }
            {
            "OS-EXT-STS:task_state": null,
            "addresses": "vm-network-UoE-internal=192.168.1.8, 172.16.49.214",
            "image": "fedora-27-docker-base-20180129 (407a5d09-cd97-455f-9bdb-4fb7f54dd4ff)",
            "OS-EXT-STS:vm_state": "active",
            "OS-SRV-USG:launched_at": "2018-06-15T16:06:34.000000",
            "flavor": "m1.medium (3)",
            "id": "aa73a427-2e9f-413d-a37b-3eaf35799f00",
            "security_groups": "name='Raminiara-kafka'\nname='default'",
            "volumes_attached": "id='507b5b94-124a-4b44-8898-ea5473df2d96'\nid='e70936e5-5a0a-4268-b199-9121fb4d057d'\nid='731cf2d8-368a-4c85-8cb5-15710a8937b8'",
            "user_id": "3d241b5fa2d0b3378901e08e86e10284dc9f9dae3732b99f71f809cf46ccb0d5",
            "OS-DCF:diskConfig": "MANUAL",
            "accessIPv4": "",
            "accessIPv6": "",
            "progress": 0,
            "OS-EXT-STS:power_state": "Running",
            "project_id": "fcef6dd450f64a1ab4ffa5a7234c4161",
            "config_drive": "",
            "status": "ACTIVE",
            "updated": "2018-11-01T09:31:55Z",
            "hostId": "0bbd5055a2e4c7535623f758c37776bbe4010c6c9a471bae96ed8f9a",
            "OS-SRV-USG:terminated_at": null,
            "key_name": "dmr",
            "properties": "",
            "OS-EXT-AZ:availability_zone": "nova",
            "name": "Raminiara-kafka-3",
            "created": "2018-06-15T16:06:20Z"
            }
            {
            "OS-EXT-STS:task_state": null,
            "addresses": "vm-network-UoE-internal=192.168.1.15, 172.16.49.12",
            "image": "fedora-27-docker-base-20180129 (407a5d09-cd97-455f-9bdb-4fb7f54dd4ff)",
            "OS-EXT-STS:vm_state": "active",
            "OS-SRV-USG:launched_at": "2018-06-15T16:06:14.000000",
            "flavor": "m1.medium (3)",
            "id": "6f971e48-f760-43bf-ad98-c38a7b90c321",
            "security_groups": "name='Raminiara-kafka'\nname='default'",
            "volumes_attached": "id='5ebe7efb-6b46-49e9-9cc2-b9cf2a8cede7'\nid='777ae1e6-6e62-4451-a0cd-e4ebc0873bd4'\nid='236699fa-3dd4-463c-9638-3e51c2e80235'",
            "user_id": "3d241b5fa2d0b3378901e08e86e10284dc9f9dae3732b99f71f809cf46ccb0d5",
            "OS-DCF:diskConfig": "MANUAL",
            "accessIPv4": "",
            "accessIPv6": "",
            "progress": 0,
            "OS-EXT-STS:power_state": "Running",
            "project_id": "fcef6dd450f64a1ab4ffa5a7234c4161",
            "config_drive": "",
            "status": "ACTIVE",
            "updated": "2018-11-02T11:10:35Z",
            "hostId": "cbc01dd821180502a81f85fb4871012bdb7a083e67c888183a83b556",
            "OS-SRV-USG:terminated_at": null,
            "key_name": "dmr",
            "properties": "",
            "OS-EXT-AZ:availability_zone": "nova",
            "name": "Raminiara-kafka-2",
            "created": "2018-06-15T16:05:46Z"
            }
            {
            "OS-EXT-STS:task_state": null,
            "addresses": "vm-network-UoE-internal=192.168.1.10, 172.16.49.208",
            "image": "fedora-27-docker-base-20180129 (407a5d09-cd97-455f-9bdb-4fb7f54dd4ff)",
            "OS-EXT-STS:vm_state": "active",
            "OS-SRV-USG:launched_at": "2018-06-15T16:05:41.000000",
            "flavor": "m1.medium (3)",
            "id": "0824e436-6213-4893-8a67-40d152e7402c",
            "security_groups": "name='Raminiara-kafka'\nname='default'",
            "volumes_attached": "id='80848d34-edd9-48ce-8949-2785f4982461'\nid='f14fe77a-242e-49d2-8a8f-c7070f19cbc6'\nid='9a3283d9-4011-4840-867a-57539ec40db6'",
            "user_id": "3d241b5fa2d0b3378901e08e86e10284dc9f9dae3732b99f71f809cf46ccb0d5",
            "OS-DCF:diskConfig": "MANUAL",
            "accessIPv4": "",
            "accessIPv6": "",
            "progress": 0,
            "OS-EXT-STS:power_state": "Running",
            "project_id": "fcef6dd450f64a1ab4ffa5a7234c4161",
            "config_drive": "",
            "status": "ACTIVE",
            "updated": "2018-11-01T09:18:31Z",
            "hostId": "232fed3b73abbf04240aa626f6a71feef3bdf9dc4fd8f437b14b609d",
            "OS-SRV-USG:terminated_at": null,
            "key_name": "dmr",
            "properties": "",
            "OS-EXT-AZ:availability_zone": "nova",
            "name": "Raminiara-kafka-1",
            "created": "2018-06-15T16:05:12Z"
            }

        # -----------------------------------------------------
        # Get the OpenStack status of our Kafka nodes.
        #[root@openstacker]

            for vmident in ${kfidents[@]}
            do
                openstack \
                    server show \
                     --format json \
                    "${vmident:?}" \
                    | jq '{"addresses", "status", "OS-EXT-STS:vm_state", "OS-EXT-STS:power_state"}'
            done

                {
                  "addresses": "vm-network-UoE-internal=192.168.1.5, 172.16.49.217",
                  "status": "ACTIVE",
                  "OS-EXT-STS:vm_state": "active",
                  "OS-EXT-STS:power_state": "Running"
                }
                {
                  "addresses": "vm-network-UoE-internal=192.168.1.8, 172.16.49.214",
                  "status": "ACTIVE",
                  "OS-EXT-STS:vm_state": "active",
                  "OS-EXT-STS:power_state": "Running"
                }
                {
                  "addresses": "vm-network-UoE-internal=192.168.1.15, 172.16.49.12",
                  "status": "ACTIVE",
                  "OS-EXT-STS:vm_state": "active",
                  "OS-EXT-STS:power_state": "Running"
                }
                {
                  "addresses": "vm-network-UoE-internal=192.168.1.10, 172.16.49.208",
                  "status": "ACTIVE",
                  "OS-EXT-STS:vm_state": "active",
                  "OS-EXT-STS:power_state": "Running"
                }

        # -----------------------------------------------------
        # Login to each of our Kafka nodes.
        #[root@openstacker]

            for vmident in ${kfidents[@]}
            do
                getvminfo "${vmident:?}"
                vmipv4=$(geteleanor192)
                echo "----"
                echo "[${vmident}][${vmipv4}]"
                echo "
                    echo \"[\$(hostname -f)]\"
                    " \
                | ssh \
                    ${sshopts[*]} \
                    -o ProxyCommand="${sshproxy:?}" \
                    ${sshuser:?}@${vmipv4:?}
            done

                ----
                [bb409e47-cf2c-4e64-aea6-e893e5d05100][192.168.1.5]
                [raminiara-kafka-4.novalocal]
                ----
                [aa73a427-2e9f-413d-a37b-3eaf35799f00][192.168.1.8]
                [raminiara-kafka-3.novalocal]
                ----
                [6f971e48-f760-43bf-ad98-c38a7b90c321][192.168.1.15]
                Ncat: Connection timed out.
                ----
                [0824e436-6213-4893-8a67-40d152e7402c][192.168.1.10]
                [raminiara-kafka-1.novalocal]

        # -----------------------------------------------------
        # Try rebooting the dead node ?
        #[root@openstacker]

            vmident=${kfidents[2]}

            openstack \
                server reboot \
                 --hard \
                 --wait \
                "${vmident:?}"

            openstack \
                server stop \
                "${vmident:?}"

                Cannot 'stop' instance 6f971e48-f760-43bf-ad98-c38a7b90c321 while it is in task_state rebooting_hard (HTTP 409) (Request-ID: req-050c9701-ee75-4c1c-a73f-af8cdd8b6013)

        # -----------------------------------------------------
        # Check the logs on the other nodes ..
        #[root@openstacker]

            vmident=${kfidents[0]}
            vmident=${kfidents[1]}
            vmident=${kfidents[3]}

            getvminfo "${vmident:?}"
            vmipv4=$(geteleanor192)

            ssh \
                ${sshopts[*]} \
                -o ProxyCommand="${sshproxy:?}" \
                ${sshuser:?}@${vmipv4:?}
                    docker logs -f stevedore_emily_1


#
# List the external volumes on the dead machine.
# Remove the external volumes from the dead machine.
#
# List the external addresses on the dead machine.
# Remove the external addresses from the dead machine.
#
# Create a new machine.
#
# Add the external volumes to the new machine.
# Add the external addresses to the new machine.
#
# Run our Kafka container on the new machine.
#


        # -----------------------------------------------------
        # Inspect the old node.
        #[root@openstacker]

            openstack \
                server show \
                 --format json \
                "${vmident:?}" \
                | jq '.'

                {
                "OS-EXT-STS:task_state": "rebooting_hard",
                "addresses": "vm-network-UoE-internal=192.168.1.15, 172.16.49.12",
                "image": "fedora-27-docker-base-20180129 (407a5d09-cd97-455f-9bdb-4fb7f54dd4ff)",
                "OS-EXT-STS:vm_state": "active",
                "OS-SRV-USG:launched_at": "2018-06-15T16:06:14.000000",
                "flavor": "m1.medium (3)",
                "id": "6f971e48-f760-43bf-ad98-c38a7b90c321",
                "security_groups": "name='Raminiara-kafka'\nname='default'",
                "volumes_attached": "id='5ebe7efb-6b46-49e9-9cc2-b9cf2a8cede7'\nid='777ae1e6-6e62-4451-a0cd-e4ebc0873bd4'\nid='236699fa-3dd4-463c-9638-3e51c2e80235'",
                "user_id": "3d241b5fa2d0b3378901e08e86e10284dc9f9dae3732b99f71f809cf46ccb0d5",
                "OS-DCF:diskConfig": "MANUAL",
                "accessIPv4": "",
                "accessIPv6": "",
                "OS-EXT-STS:power_state": "Running",
                "project_id": "fcef6dd450f64a1ab4ffa5a7234c4161",
                "config_drive": "",
                "status": "HARD_REBOOT",
                "updated": "2018-11-21T15:34:09Z",
                "hostId": "cbc01dd821180502a81f85fb4871012bdb7a083e67c888183a83b556",
                "OS-SRV-USG:terminated_at": null,
                "key_name": "dmr",
                "properties": "",
                "OS-EXT-AZ:availability_zone": "nova",
                "name": "Raminiara-kafka-2",
                "created": "2018-06-15T16:05:46Z"
                }

        # -----------------------------------------------------
        # List the external volumes on the old machine.
        #[root@openstacker]

            openstack \
                server show \
                 --format json \
                "${vmident:?}" \
                | jq -r '.volumes_attached' \
                | sed "s/id='\([^']*\)'/\1/"

                5ebe7efb-6b46-49e9-9cc2-b9cf2a8cede7
                777ae1e6-6e62-4451-a0cd-e4ebc0873bd4
                236699fa-3dd4-463c-9638-3e51c2e80235

        # -----------------------------------------------------
        # Unlink the external volumes from the old machine.
        #[root@openstacker]

            volident=5ebe7efb-6b46-49e9-9cc2-b9cf2a8cede7

            openstack \
                server \
                    remove volume \
                    "${vmident:?}" \
                    "${volident:?}"

                Cannot 'detach_volume' instance 6f971e48-f760-43bf-ad98-c38a7b90c321 while it is in task_state rebooting_hard (HTTP 409) (Request-ID: req-6e95a70f-4aef-4418-90b7-2610023eb7e3)

        # -----------------------------------------------------
        # Seriously kill the old machine.
        #[root@openstacker]

            openstack \
                server stop \
                    "${vmident:?}" \

                Cannot 'pause' instance 6f971e48-f760-43bf-ad98-c38a7b90c321 while it is in task_state rebooting_hard (HTTP 409) (Request-ID: req-3663958b-2da9-47c0-bc2f-39c7b43be31e)
                Cannot 'stop' instance 6f971e48-f760-43bf-ad98-c38a7b90c321 while it is in task_state rebooting_hard (HTTP 409) (Request-ID: req-31df69b2-ca75-4bec-ae4f-26f28db76071)
                Cannot 'rescue' instance 6f971e48-f760-43bf-ad98-c38a7b90c321 while it is in task_state rebooting_hard (HTTP 409) (Request-ID: req-b957e645-3e84-47a3-bfa9-39771b6cb057)

            openstack \
                server set \
                    --state error \
                    "${vmident:?}" \

                Policy doesn't allow os_compute_api:os-admin-actions:reset_state to be performed. (HTTP 403) (Request-ID: req-652f219c-07ad-4aa3-b3ec-be3a8284863d)


# -----------------------------------------------------
# -----------------------------------------------------
# Create a new machine, add new volumes, and add it to the cluster.

        # -----------------------------------------------------
        # Create a new machine.
        #[root@openstacker]

            vmident=(
                "$(makevm \
                    "kafka-5" \
                    "${m1medium}"
                    )"
                )

        # -----------------------------------------------------
        # Check the machine state.
        #[root@openstacker]

            openstack \
                server show \
                 --format json \
                "${vmident:?}" \
                | jq '.'

                {
                "OS-EXT-STS:task_state": null,
                "addresses": "vm-network-UoE-internal=192.168.1.36",
                "image": "fedora-27-docker-base-20180129 (407a5d09-cd97-455f-9bdb-4fb7f54dd4ff)",
                "OS-EXT-STS:vm_state": "active",
                "OS-SRV-USG:launched_at": "2018-11-22T13:51:58.000000",
                "flavor": "m1.medium (3)",
                "id": "45a97401-c65b-46b9-8f58-c75d8fe04859",
                "security_groups": "name='default'",
                "volumes_attached": "",
                "user_id": "3d241b5fa2d0b3378901e08e86e10284dc9f9dae3732b99f71f809cf46ccb0d5",
                "OS-DCF:diskConfig": "MANUAL",
                "accessIPv4": "",
                "accessIPv6": "",
                "progress": 0,
                "OS-EXT-STS:power_state": "Running",
                "project_id": "fcef6dd450f64a1ab4ffa5a7234c4161",
                "config_drive": "",
                "status": "ACTIVE",
                "updated": "2018-11-22T13:51:58Z",
                "hostId": "472bf165b73c48579727e09d16b5e82734d1ba5a82d1e7b26091e22d",
                "OS-SRV-USG:terminated_at": null,
                "key_name": "dmr",
                "properties": "",
                "OS-EXT-AZ:availability_zone": "nova",
                "name": "Raminiara-kafka-5",
                "created": "2018-11-22T13:45:43Z"
                }

        # -----------------------------------------------------
        # Assign floating IP addresess.
        #[root@openstacker]

            floating=$(
                addinternalfloat "${vmident:?}"
                )

            echo "Float [${floating}]"

                Float [172.16.50.50]

        # -----------------------------------------------------
        # Remove the default security group.
        #[root@openstacker]

#           groupid=$(
#               openstack \
#                   security group list \
#                       --format json \
#                   | jq -r '.[] | select(.Name | test("default")) | .ID'
#               )
#
#           openstack \
#              server remove \
#                   security group \
#                       "${vmident:?}" \
#                       "${groupid}"

        # -----------------------------------------------------
        # Add the Kafka security group.
        #[root@openstacker]

            groupid=$(
                openstack \
                    security group list \
                        --format json \
                    | jq -r '.[] | select(.Name | test(".kafka")) | .ID'
                )

            openstack \
                server add \
                    security group \
                        "${vmident:?}" \
                        "${groupid}"

        # -----------------------------------------------------
        # Test internal access.
        #[root@openstacker]

            getvminfo "${vmident:?}"
            internalip=$(geteleanor192)

echo "
Node    [${vmident}]
Name    [$(getvmname)]
Address [${internalip}]
"

            echo "
                hostname
                " \
                | ssh \
                    ${sshopts[*]} \
                    -o ProxyCommand="${sshproxy}" \
                    "${sshuser:?}@${internalip:?}"

            >   raminiara-kafka-5.novalocal

        # -----------------------------------------------------
        # Test external access.
        #[root@openstacker]

            getvminfo "${vmident:?}"
            externalip=$(geteleanor172)

echo "
Node    [${vmident}]
Name    [$(getvmname)]
Address [${externalip}]
"
            echo "
                hostname
                " \
                | ssh \
                    ${sshopts[*]} \
                    "${sshuser:?}@${externalip:?}"

            >   raminiara-kafka-5.novalocal

        # -----------------------------------------------------
        # Data volume settings.
        #[root@openstacker]

            volsize=512

            voldevices=(
                '/dev/vdb'
                '/dev/vdc'
                )
            volnames=(
                'data-00'
                'data-01'
                'data-02'
                )

            innerpath=/var/local/inner/kafka
            outerpath=/var/local/outer/kafka

        # -----------------------------------------------------
        # Create our volume config script.
        #[root@openstacker]

            cat > /tmp/volume-init.sh << 'EOSH'

#---------------------------------------------------------------------
# Create a filesystem on the new device.

echo ""
echo "Creating filesystem [${voldevice:?}]"

mkfs.btrfs \
    "${voldevice:?}"

echo ""
echo "Checking filesystem [${voldevice:?}]"

btrfs \
    filesystem show \
    "${voldevice:?}"

#---------------------------------------------------------------------
# Create our mount point.

echo ""
echo "Creating mount point [${volpath:?}]"

mkdir -p "${volpath:?}"
touch "${volpath:?}/mount-failed"

#---------------------------------------------------------------------
# Add the volume to our FileSystemTABle.
# https://www.howtoforge.com/reducing-disk-io-by-mounting-partitions-with-noatime

echo ""
echo "Updating fstab [${voldevice:?}][${volpath:?}]"

fsuuid=$(
    lsblk --noheadings --output UUID "${voldevice:?}"
    )

cat >> /etc/fstab << EOTAB
UUID=${fsuuid:?} ${volpath:?}    btrfs    defaults,noatime    0  0
EOTAB

#---------------------------------------------------------------------
# Mount the new volume.

echo ""
echo "Mounting filesystem [${volpath:?}]"

mount "${volpath:?}"

#---------------------------------------------------------------------
# Check the new volume.

echo ""
echo "Checking filesystem [${volpath:?}]"

df -h "${volpath:?}"

lsblk

EOSH

        # -----------------------------------------------------
        # Add new data volumes.
        #[root@openstacker]

            getvminfo "${vmident:?}"

echo "
Node   [${vmident}]
Name   [$(getvmname)]
"

            for i in ${!voldevices[*]}
            do

                volname=${volnames[$i]}
                volpath=${outerpath}/${volname}
                voldevice=${voldevices[$i]}

echo "
Device [${voldevice}]
Target [${volpath}]
"

                volident=$(
                    makevolume \
                       "$(getvmname)-${volname:?}" \
                       "${volsize:?}"
                    )

                openstack \
                    server add volume \
                    "${vmident:?}" \
                    "${volident:?}" \
                    --device "${voldevice:?}"

                echo "
                    sudo -s
                    export voldevice=${voldevice:?}
                    export volpath=${volpath:?}
                    export volname=${volname:?}
                    " \
                    | cat - /tmp/volume-init.sh \
                    | ssh ${sshopts[*]} \
                        -o ProxyCommand="${sshproxy}" \
                        "${sshuser:?}@$(geteleanor192)" \

            done


#
# Need to update our quota.
# VolumeSizeExceedsAvailableQuota: Requested volume or snapshot exceeds allowed gigabytes quota. Requested 512G, quota is 6148G and 6144G has been consumed. (HTTP 413) (Request-ID: req-cee5a1a7-1727-4b59-91f4-f39376ca8d9c)
#



