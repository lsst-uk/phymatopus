#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


* Each component is framed as a question "How do we ..".
* Each component answered with a wiki page, with references to code and notes.


    * Wide Area Network (WAN) connection
        * QUB deploying Kafka service publishing QUB events
            * Need to check firewall access
            * Permanent receiver on Elanor and/or trop03

        * Cloud based WAN testing (today I'm in Singapore)
            * Transient receiver on Elanor and/or trop03

    * Connecting
        * Can we connect Kafka to Kafka ?
        * Hw do we control the partitioning ?
        * Do we need a proxy/gateway listening to external Kafka and writing to local Kafka ?

    * Logistics
        * How do we store an archive ?
        * Can we compress an archive ?

    * Deployment
        * Docker Kafka service
            * Install scripts
        * Import test data
            * Can we just put partition backups in the right place and go ?
                * Kafka partition backups from http URL
                * Kafka partition backups from rsync
            * Do we need a tool to read Avro files and import ?
                * Avro files from http URL
                * Avro files from rsync

    * Data sources
        * QUB - see above
        * Firethorn
            * Send the results of a query to a Kafka service
            * Send to both Kafka and database


    * Configuring
        * How do we create topics ?
        * How do we configure partitions ?

    * Monitoring
        * Kafdrop is a UI for monitoring Apache Kafka clusters
          https://github.com/HomeAdvisor/Kafdrop

    * Scaling
        * How do we deploy multiple services
            * docker-compose
              https://docs.docker.com/compose/

            * docker-swarm
              https://docs.docker.com/engine/swarm/
              
            * Kubernetes
              https://kubernetes.io/

            * OpenStack
              https://www.openstack.org/  
              https://wiki.openstack.org/wiki/Magnum
                
            * OpenShift
              https://www.openshift.com/

        * How do we coordinate multiple services

        * Virtual networks
          https://docs.docker.com/network/
          



    * Data architecture

        * Everyone listens to one Uber stream (with images)
            * Bandwidth calculations

        * Smaller streams
            * with-images/without-images
            * postition
            * postition + matches

        * Micro streams
            * User defined micro streams, based on micro-services

        * Streams
            * How do we use Kafka Streams
            * How do we configure Kafka Streams
            * How do we ...

        * Schemas
            * No schema, generic records
            * Fixed schema, source control
            * Registered schema, schema registry


          
        * Filtering
            * In-process filtering in Kafka
            * External filtering (export, filter, import).

        * Workflow
            * Connecting processors with streams


            * Follow the trail of Spring things ..
                Spring Cloud Data Flow
                http://cloud.spring.io/spring-cloud-dataflow/
                Spring Cloud Stream
                https://cloud.spring.io/spring-cloud-stream/
                Kafka Client Compatibility
                https://github.com/spring-cloud/spring-cloud-stream/wiki/Kafka-Client-Compatibility
                Spring Cloud Stream Binder for Apache Kafka
                https://github.com/spring-cloud/spring-cloud-stream-binder-kafka
                Spring Cloud Stream App Starters (tensorflow example)
                https://cloud.spring.io/spring-cloud-stream-app-starters/
                Spring Cloud Stream Sample Applications
                https://github.com/spring-cloud/spring-cloud-stream-samples

        * Streams in Python
        * Streams in JPnb
            * Monitoring streams
            * Visualising streams
        



    * Cross matching
    
        * Create a set of services with the same API,
          each implementing a different cross-match
          cone-search algorithm.

            * Hierarchical Triangular Mesh (HTM)
                * HTM with database on disc
                * HTM with database in memory
                * HTM with tree in memory

            * “zoned” neighbours combined with cartesian unit vectors
              https://arxiv.org/pdf/cs/0408031.pdf
                * Zones in database on disc
                * Zones in database in memory
                * Zones with tree in memory

        * Testbed for Kafka stream processing,
          two implementations for each algorithm
            * REST/JSON webservice API
            * Kafka Stream module API ... ?

        * Initial data import from Firethorn query
            * Large archive data sets
            * Small user result sets
         
        * Potential replacement for existing cone-search services

        * Paper describing the algorithms, implementations and results

        CQEngine - Collection Query Engine
        https://github.com/npgall/cqengine








