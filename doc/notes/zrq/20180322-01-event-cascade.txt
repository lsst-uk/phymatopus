#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


    Not all of the processing modules need to see all of the event
    Not all of the processing modules need to see all of the events
    

    Current work is looking at crossmatching.
    Basic crossmatching depends on [ra, dec, [htmid], [cx, cy, cz]].
    Basic crossmatching does not need thumbnails, light curves or photometry.


    Pattern matching the light curve depends on the light curve and photometry.
    Pattern matching the light curve does not depend on position or thunbnails.


    Shape matching the source depends on difference images and cut outs of other catalogs.
    Shape matching the source does not depend on position or thumbnails.
    Shape matching the source may need cut outs from other catalogs based on crossmatch results.
    


    We don't nee to produce one Uber output stream.
    We need to produce multiple output streams customised for specific use cases.
    

    * Input store, uses Kafka as a rolling storeage system, just getting the raw evets onto disc.    
    * Input filter, splits event into smaller packets relevant for each processing chain.
    
    * Basic crossmatching gets [ra, dec, [htmid], [cx, cy, cz]].
    * Pattern matching the light curve gets the light curve and photometry.

    * Shape matching the source gets the difference images.

    * Logic combiners make choices based on output from multiple smaller streams.
     
        * Shape matching the source is triggered IF crossmatching says (stelar > 90%)
        * ...

    * Downstream filters can reassemble a larger packets by combining filter results and data from the original input.
    * Final output is customised for each of use case.





    
    
    

