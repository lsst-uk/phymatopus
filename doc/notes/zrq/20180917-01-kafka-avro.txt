#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


    Totally not what we were expecting ...
    The messages appear to contain the schema in them !?

        2018-09-17 12:29:39,221 DEBUG [main] [ZtfAvroReader] ----
        2018-09-17 12:29:39,221 DEBUG [main] [ZtfAvroReader] Offset [11645]
        2018-09-17 12:29:39,221 DEBUG [main] [ZtfAvroReader] Key    [null]
        2018-09-17 12:29:39,221 DEBUG [main] [ZtfAvroReader] Hydrating ....
        2018-09-17 12:29:39,221 DEBUG [main] [ZtfAvroReader] Bytes [4F 62 6A 01 04 14 61 76 72 6F 2E 63 6F 64 65 63]
        2018-09-17 12:29:39,221 DEBUG [main] [ZtfAvroReader] Bytes [08 6E 75 6C 6C 16 61 76 72 6F 2E 73 63 68 65 6D]
        2018-09-17 12:29:39,221 DEBUG [main] [ZtfAvroReader] Bytes [61 B0 D7 02 7B 22 74 79 70 65 22 3A 20 22 72 65]
        2018-09-17 12:29:39,221 DEBUG [main] [ZtfAvroReader] Bytes [63 6F 72 64 22 2C 20 22 76 65 72 73 69 6F 6E 22]
        2018-09-17 12:29:39,221 DEBUG [main] [ZtfAvroReader] Bytes [3A 20 22 33 2E 30 22 2C 20 22 6E 61 6D 65 22 3A]
        2018-09-17 12:29:39,221 DEBUG [main] [ZtfAvroReader] Bytes [20 22 61 6C 65 72 74 22 2C 20 22 6E 61 6D 65 73]
        2018-09-17 12:29:39,221 DEBUG [main] [ZtfAvroReader] Bytes [70 61 63 65 22 3A 20 22 7A 74 66 22 2C 20 22 66]
        2018-09-17 12:29:39,221 DEBUG [main] [ZtfAvroReader] Bytes [69 65 6C 64 73 22 3A 20 5B 7B 22 74 79 70 65 22]
        2018-09-17 12:29:39,221 DEBUG [main] [ZtfAvroReader] Bytes [3A 20 22 73 74 72 69 6E 67 22 2C 20 22 6E 61 6D]
        2018-09-17 12:29:39,222 DEBUG [main] [ZtfAvroReader] Bytes [65 22 3A 20 22 73 63 68 65 6D 61 76 73 6E 22 2C]
        2018-09-17 12:29:39,222 DEBUG [main] [ZtfAvroReader] Bytes [20 22 64 6F 63 22 3A 20 22 73 63 68 65 6D 61 20]
        2018-09-17 12:29:39,222 DEBUG [main] [ZtfAvroReader] Bytes [76 65 72 73 69 6F 6E 20 75 73 65 64 22 7D 2C 20]
        2018-09-17 12:29:39,222 DEBUG [main] [ZtfAvroReader] Bytes [7B 22 74 79 70 65 22 3A 20 22 73 74 72 69 6E 67]
        2018-09-17 12:29:39,222 DEBUG [main] [ZtfAvroReader] Bytes [22 2C 20 22 6E 61 6D 65 22 3A 20 22 70 75 62 6C]
        2018-09-17 12:29:39,223 DEBUG [main] [ZtfAvroReader] Bytes [69 73 68 65 72 22 2C 20 22 64 6F 63 22 3A 20 22]
        2018-09-17 12:29:39,223 DEBUG [main] [ZtfAvroReader] Bytes [6F 72 69 67 69 6E 20 6F 66 20 61 6C 65 72 74 20]
        2018-09-17 12:29:39,223 DEBUG [main] [ZtfAvroReader] ASCII [O b j . . . a v r o . c o d e c]
        2018-09-17 12:29:39,223 DEBUG [main] [ZtfAvroReader] ASCII [. n u l l . a v r o . s c h e m]
        2018-09-17 12:29:39,223 DEBUG [main] [ZtfAvroReader] ASCII [a . . . { " t y p e " :   " r e]
        2018-09-17 12:29:39,224 DEBUG [main] [ZtfAvroReader] ASCII [c o r d " ,   " v e r s i o n "]
        2018-09-17 12:29:39,227 DEBUG [main] [ZtfAvroReader] ASCII [:   " 3 . 0 " ,   " n a m e " :]
        2018-09-17 12:29:39,227 DEBUG [main] [ZtfAvroReader] ASCII [  " a l e r t " ,   " n a m e s]
        2018-09-17 12:29:39,227 DEBUG [main] [ZtfAvroReader] ASCII [p a c e " :   " z t f " ,   " f]
        2018-09-17 12:29:39,227 DEBUG [main] [ZtfAvroReader] ASCII [i e l d s " :   [ { " t y p e "]
        2018-09-17 12:29:39,227 DEBUG [main] [ZtfAvroReader] ASCII [:   " s t r i n g " ,   " n a m]
        2018-09-17 12:29:39,227 DEBUG [main] [ZtfAvroReader] ASCII [e " :   " s c h e m a v s n " ,]
        2018-09-17 12:29:39,227 DEBUG [main] [ZtfAvroReader] ASCII [  " d o c " :   " s c h e m a  ]
        2018-09-17 12:29:39,228 DEBUG [main] [ZtfAvroReader] ASCII [v e r s i o n   u s e d " } ,  ]
        2018-09-17 12:29:39,228 DEBUG [main] [ZtfAvroReader] ASCII [{ " t y p e " :   " s t r i n g]
        2018-09-17 12:29:39,228 DEBUG [main] [ZtfAvroReader] ASCII [" ,   " n a m e " :   " p u b l]
        2018-09-17 12:29:39,228 DEBUG [main] [ZtfAvroReader] ASCII [i s h e r " ,   " d o c " :   "]
        2018-09-17 12:29:39,228 DEBUG [main] [ZtfAvroReader] ASCII [o r i g i n   o f   a l e r t  ]
        2018-09-17 12:29:39,228 ERROR [main] [ZtfAvroReader] RuntimeException hydrating alert [Unrecognized header bytes: 0x4F 0x62]

    This matches the container file format described here:

    https://avro.apache.org/docs/1.8.1/spec.html#Encodings
    Object Container Files

        Avro includes a simple object container file format. A file has a schema, and all objects stored in the file must be written according to that schema, using binary encoding. Objects are stored in blocks that may be compressed. Syncronization markers are used between blocks to permit efficient splitting of files for MapReduce processing.

        Files may include arbitrary user-specified metadata.

        A file consists of:

            A file header, followed by one or more file data blocks.

        A file header consists of:

            * Four bytes, ASCII 'O', 'b', 'j', followed by 1.
            * File metadata, including the schema.
            * The 16-byte, randomly-generated sync marker for this file.

        File metadata is written as if defined by the following map schema:

            {"type": "map", "values": "bytes"}

        All metadata properties that start with "avro." are reserved. The following file metadata properties are currently used:

            avro.schema contains the schema of objects stored in the file, as JSON data (required).
            avro.codec the name of the compression codec used to compress blocks, as a string. Implementations are required to support the following codecs: "null" and "deflate". If codec is absent, it is assumed to be "null". The codecs are described with more detail below.

        A file header is thus described by the following schema:

            {
                "type": "record", "name": "org.apache.avro.file.Header",
                "fields" : [
                    {"name": "magic", "type": {"type": "fixed", "name": "Magic", "size": 4}},
                    {"name": "meta", "type": {"type": "map", "values": "bytes"}},
                    {"name": "sync", "type": {"type": "fixed", "name": "Sync", "size": 16}},
                    ]
            }

        A file data block consists of:

            * A long indicating the count of objects in this block.
            * A long indicating the size in bytes of the serialized objects in the current block, after any codec is applied
            * The serialized objects. If a codec is specified, this is compressed by that codec.
            * The file's 16-byte sync marker.

        Thus, each block's binary data can be efficiently extracted or skipped without deserializing the contents.
        The combination of block size, object counts, and sync markers enable detection of corrupt blocks and help ensure data integrity.

        From the example data, the header (almost) matches ...

        4 byte magic number

            4f 62 6a 01 04 14 61 76 72 6f 2e 63 6f 64 65 63  |Obj...avro.codec|
             O  b  j           a  v  r  o  .  c  o  d  e  c

            08 6e 75 6c 6c 16 61 76 72 6f 2e 73 63 68 65 6d  |.null.avro.schem|
             .  n  u  l  l  .  a  v  r  o  .  s  c  h  e  m

            61 b0 d7 02 7b 22 74 79 70 65 22 3a 20 22 72 65  |a...{"type": "re|
             a  .  .  .  {  "  t  y  p  e  "  :  -  "  r  e

            63 6f 72 64 22 2c 20 22  76 65 72 73 69 6f 6e 22  |cord", "version"|
            3a 20 22 33 2e 30 22 2c  20 22 6e 61 6d 65 22 3a  |: "3.0", "name":|
            20 22 61 6c 65 72 74 22  2c 20 22 6e 61 6d 65 73  | "alert", "names|
            70 61 63 65 22 3a 20 22  7a 74 66 22 2c 20 22 66  |pace": "ztf", "f|
            69 65 6c 64 73 22 3a 20  5b 7b 22 74 79 70 65 22  |ields": [{"type"|
            3a 20 22 73 74 72 69 6e  67 22 2c 20 22 6e 61 6d  |: "string", "nam|

        From example data, it looks like there is a zero byte (map end) between the metadata and the first sync marker.

  000055f0  6c 74 65 63 68 2e 65 64  75 29 22 7d 00 cc ab 73  |ltech.edu)"}...s|
  00005600  dd 08 14 d9 4a 4d 7d 57  b8 5c fe 2e 61 02 e8 84  |....JM}W.\..a...|
  00005610  04 06 33 2e 30 32 5a 54  46 20 28 77 77 77 2e 7a  |..3.02ZTF (www.z|
  00005620  74 66 2e 63 61 6c 74 65  63 68 2e 65 64 75 29 18  |tf.caltech.edu).|

  000055f0  6c 74 65 63 68 2e 65 64 75 29 22 7d 00 cc ab 73 ...
             l  t  e  c  h  .  e  d  u  )  "  }  | |
                                                 | \-- 16 byte marker
                                                 |
                                     zero byte --/

  00005600  dd 08 14 d9 4a 4d 7d 57 b8 5c fe 2e 61 02 e8 84 ...
                                                 | |
            ---- 16 byte marker -----------------/ \-- unknown [02e8 8404]


  00005610  04 06 33 2e 30 32 5a 54 46 20 28 77 77 77 2e 7a
            |   |  3  .  0  2  Z  T  F  -  (  w  w  w  .  z
            |   |  |     |  |  |
            /  (3) \--v--/  |   \-----------v----------------
                      |     |               |
     schema version --/  (25*2 = 0x32)      \-- publisher ---


  00005620  74 66 2e 63 61 6c 74 65 63 68 2e 65 64 75 29 18
             t  f  .  c  a  l  t  e  c  h  .  e  d  u  )  .
                                                       |
            --- publisher (25 characters) -------------/

    The same 16 byte sequence appears at the end as well.

  0000d740  7a 80 43 00 00 cc ab 73 dd 08 14 d9 4a 4d 7d 57
                           |
                           \--------- 16 byte marker ------

  0000d750  b8 5c fe 2e 61
                         |
            -------------/

        Guess - size numbers are doubled ?

        4 byte magic number

            4f 62 6a 01
             O  b  j

        map contains two things, doubled to 4

            04

        first string has ten characters, doubled to 20 (hex 14)

            14

            61 76 72 6f 2e 63 6f 64 65 63
             a  v  r  o  .  c  o  d  e  c

        next string has four characters, doubled to 8

            08

            6e 75 6c 6c
             n  u  l  l

        next string has eleven characters, doubled to 22 (hex 16)

            16

            61 76 72 6f 2e 73 63 68 65 6d 61
             a  v  r  o  .  s  c  h  e  m  a

        three unknown bytes

            b0 d7 02
             .  .  .

        the text of the schema itself ...

             7b 22 74 79 70 65 22 3a 20 22 72 65



  00000020  61 b0 d7 02 7b 22 74 79 70 65 22 3a 20 22 72 65  |a...{"type": "re|
            -- -- -- --  {  "  t  y  p  e  "  :  -  "  r  e

  000055f0  6c 74 65 63 68 2e 65 64 75 29 22 7d 00
             l  t  e  c  h  .  e  d  u  )  "  }

            bytes 0024 .. 55fb = 55D7

    Ok, another clue
    https://avro.apache.org/docs/1.8.1/spec.html#binary_encode_primitive

        "int and long values are written using variable-length zig-zag coding"

    https://developers.google.com/protocol-buffers/docs/encoding?csw=1#types
        "ZigZag encoding maps signed integers to unsigned integers so that numbers with a small absolute value
        (for instance, -1) have a small varint encoded value too. It does this in a way that "zig-zags" back
        and forth through the positive and negative integers, so that -1 is encoded as 1, 1 is encoded as 2,
        -2 is encoded as 3, and so on .."

        value	hex
            0   00
           -1   01
            1   02
           -2   03
            2   04
            ...
          -64   7f
           64   80 01

    https://lucene.apache.org/core/3_5_0/fileformats.html#VInt
        "variable-length format for positive integers is defined where the high-order bit of each byte indicates
        whether more bytes remain to be read. The low-order seven bits are appended as increasingly more significant
        bits in the resulting integer value."

    So, positive values are doubled, spread over 7bits per byte, and the 8th bit indicates if there are more bytes.

    The size of schema is (55FB - 0024) = 55D7, which maps to three bytes b0 d7 02 ?

    55D7
       5    5       D    7
    0101 0101    1101 0111

    doubled
       A    B       A    E
    1010 1011    1010 1110

    split into n*7 bits
    x000 0010    x101 0111    x010 1110

    add 8th bit
       8    2       D    7       2    E
    1000 0010    1101 0111    0010 1110


    Try the other way ....

    B0 D7 02
       B    0       D    7       0    2
    1011 0000    1101 0111    0000 0010

    remove the 8th bit
    -011 0000    -101 0111    -000 0010

    shuffle up
       0    C       2    B       8    2
       0 1100    0010 1011    1000 0010

    divide by two
       0    6       1    5       C    1
    0000 0110    0001 0101    1100 0001



